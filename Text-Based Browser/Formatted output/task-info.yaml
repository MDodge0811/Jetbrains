type: edu
custom_name: stage6
files:
- name: browser/browser.py
  visible: true
  text: |-
    import os
    import argparse
    from _collections import deque
    import requests
    import os
    import argparse
    from _collections import deque
    import requests


    parser = argparse.ArgumentParser()
    parser.add_argument("directory", help="name of directory for files")
    arg = parser.parse_args()


    try:
        os.mkdir(arg.directory)
    except FileExistsError:
        pass


    back = deque()
    current = []


    def save_url(url):
        file = url.split('.')
        file = '.'.join(file[:-1])
        r = get_url(url)
        with open(f"{arg.directory}/{file}", 'w') as f:
                f.write(r)
                print(r)
        return main()


    def get_url(url):
        if "http://" not in url[0:7]:
            url = "http://" + url
        return requests.get(url)

    def print_file(file):
        try:
            with open(f"{arg.directory}/{file}", 'r') as f:
                print(f.read())
        except FileNotFoundError:
            print("Error: Incorrect URL")
        return main()


    def main():
        url = input()
        if url == "exit":
            return exit()
        elif url == "back":
            title = back.pop()
            file = title.split('.')[0]
            return print_file(file)
        elif url[-4] == '.':
            if len(current) > 0:
                back.append(current.pop())
            current.append(url)
            return save_url(url)
        else:
            return print_file(url)


    main()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult

    import os
    import shutil

    from colorama import Fore

    import sys
    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TextBasedBrowserTest(StageTest):

        def generate(self):

            dir_for_files = os.path.join(os.curdir, 'tb_tabs')
            return [
                TestCase(
                    stdin='2.python-requests.org\nexit',
                    attach='requests',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='en.wikipedia.org\nwiki\nexit',
                    attach='Wikipedia',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='bloombergcom\nexit',
                    args=[dir_for_files]
                ),
            ]

        def _check_files(self, path_for_tabs: str, right_word: str) -> int:
            """
            Helper which checks that browser saves visited url in files and
            provides access to them.

            :param path_for_tabs: directory which must contain saved tabs
            :param right_word: Word-marker which must be in right tab
            :return: True, if right_words is present in saved tab
            """

            path, dirs, filenames = next(os.walk(path_for_tabs))

            for file in filenames:

                with open(os.path.join(path_for_tabs, file), 'r', encoding='utf-8') as tab:
                    try:
                        content = tab.read()
                    except UnicodeDecodeError:
                        return -1

                    if '</p>' not in content and '</script>' not in content:
                        if '</div>' not in content and right_word in content:
                            return 1

            return 0

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if '<p>' in reply:
                    return CheckResult.wrong('You haven\'t checked whether URL was correct')
                else:
                    return CheckResult.correct()

            # Correct URL
            if isinstance(attach, str):
                right_word = attach

                path_for_tabs = os.path.join(os.curdir, 'tb_tabs')

                if not os.path.isdir(path_for_tabs):
                    return CheckResult.wrong("There are no directory for tabs")

                check_files_result = self._check_files(path_for_tabs, right_word)
                if not check_files_result:
                    return CheckResult.wrong('There are no correct saved tabs')
                elif check_files_result == -1:
                    return CheckResult.wrong('An error occurred while reading your saved tab. '
                                             'Perhaps you used the wrong encoding?')

                try:
                    shutil.rmtree(path_for_tabs)
                except PermissionError:
                    return CheckResult.wrong("Impossible to remove the directory for tabs. Perhaps you haven't closed some file?")

                if not Fore.BLUE in reply:
                    return CheckResult.wrong('There are no blue refs in output')

                if '</p>' not in reply and '</div>' not in reply:
                    if right_word in reply:
                        return CheckResult.correct()

                return CheckResult.wrong('You haven\'t parsed result of request')


    TextBasedBrowserTest('browser.browser').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/79/stages/441/implement
status: Unchecked
record: -1
